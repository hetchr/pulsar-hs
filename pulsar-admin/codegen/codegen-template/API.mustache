{-# LANGUAGE DataKinds                  #-}
{-# LANGUAGE DeriveGeneric              #-}
{-# LANGUAGE DeriveTraversable          #-}
{-# LANGUAGE FlexibleContexts           #-}
{-# LANGUAGE FlexibleInstances          #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE RecordWildCards            #-}
{-# LANGUAGE TypeFamilies               #-}
{-# LANGUAGE TypeOperators              #-}

module Pulsar.Admin.API
  ( -- * Client
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}    {{operationId}}{{^-last}}
  , {{/-last}}{{/operation}}{{^-last}}
  , {{/-last}}{{/operations}}{{/apis}}{{/apiInfo}}
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#allParams.0}}  , {{operationIdCamelCase}}Parameters (..)
{{/allParams.0}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
  ) where

import           Pulsar.Admin.Types

import           Data.Aeson                         (Value)
import qualified Data.Map                           as Map
import           Data.Proxy                         (Proxy (..))
import           Data.Text                          (Text)
import qualified Data.Text                          as T
import           GHC.Generics                       (Generic)
import           Servant.API
import           Servant.Client                     (client)
import           Servant.Client.Internal.HttpClient (ClientM (..))


{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#hasFormParams}}
data {{vendorExtensions.x-form-name}} = {{vendorExtensions.x-form-name}}
  { {{#formParams}}{{vendorExtensions.x-form-prefix}}{{vendorExtensions.x-form-param-name}} :: {{dataType}}{{^-last}}
  , {{/-last}}{{/formParams}}
  } deriving (Show, Eq, Generic, Data)

instance FromForm {{vendorExtensions.x-form-name}}
instance ToForm {{vendorExtensions.x-form-name}}
{{/hasFormParams}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

-- | List of elements parsed from a query.
newtype QueryList (p :: CollectionFormat) a = QueryList
  { fromQueryList :: [a]
  } deriving (Functor, Applicative, Monad, Foldable, Traversable)

-- | Formats in which a list can be encoded into a HTTP path.
data CollectionFormat
  = CommaSeparated -- ^ CSV format for multiple parameters.
  | SpaceSeparated -- ^ Also called "SSV"
  | TabSeparated -- ^ Also called "TSV"
  | PipeSeparated -- ^ `value1|value2|value2`
  | MultiParamArray -- ^ Using multiple GET parameters, e.g. `foo=bar&foo=baz`. Only for GET params.

instance FromHttpApiData a => FromHttpApiData (QueryList 'CommaSeparated a) where
  parseQueryParam = parseSeparatedQueryList ','

instance FromHttpApiData a => FromHttpApiData (QueryList 'TabSeparated a) where
  parseQueryParam = parseSeparatedQueryList '\t'

instance FromHttpApiData a => FromHttpApiData (QueryList 'SpaceSeparated a) where
  parseQueryParam = parseSeparatedQueryList ' '

instance FromHttpApiData a => FromHttpApiData (QueryList 'PipeSeparated a) where
  parseQueryParam = parseSeparatedQueryList '|'

instance FromHttpApiData a => FromHttpApiData (QueryList 'MultiParamArray a) where
  parseQueryParam = error "unimplemented FromHttpApiData for MultiParamArray collection format"

parseSeparatedQueryList :: FromHttpApiData a => Char -> Text -> Either Text (QueryList p a)
parseSeparatedQueryList char = fmap QueryList . mapM parseQueryParam . T.split (== char)

instance ToHttpApiData a => ToHttpApiData (QueryList 'CommaSeparated a) where
  toQueryParam = formatSeparatedQueryList ','

instance ToHttpApiData a => ToHttpApiData (QueryList 'TabSeparated a) where
  toQueryParam = formatSeparatedQueryList '\t'

instance ToHttpApiData a => ToHttpApiData (QueryList 'SpaceSeparated a) where
  toQueryParam = formatSeparatedQueryList ' '

instance ToHttpApiData a => ToHttpApiData (QueryList 'PipeSeparated a) where
  toQueryParam = formatSeparatedQueryList '|'

instance ToHttpApiData a => ToHttpApiData (QueryList 'MultiParamArray a) where
  toQueryParam = error "unimplemented ToHttpApiData for MultiParamArray collection format"

formatSeparatedQueryList :: ToHttpApiData a => Char ->  QueryList p a -> Text
formatSeparatedQueryList char = T.intercalate (T.singleton char) . map toQueryParam . fromQueryList

-- Clients
{{#apiInfo}}
{{#apis}}{{#operations}}{{#operation}}
-- ^ {{& notes}}
type {{operationIdCamelCase}}API =
      "admin" :> "v2" :> {{& vendorExtensions.x-route-type}}

{{#allParams.0}}
data {{operationIdCamelCase}}Parameters = {{operationIdCamelCase}}Parameters
  { {{#allParams}}{{operationId}}{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} :: {{^required}}{{^isBodyParam}}Maybe {{/isBodyParam}}{{/required}}{{dataType}} -- ^ {{& description}}{{^-last}}
  , {{/-last}}{{/allParams}}
  } deriving (Show, Eq, Generic)

{{operationId}} :: {{operationIdCamelCase}}Parameters -> ClientM {{returnType}}{{^returnType}}NoContent{{/returnType}}
{{operationId}} {{operationIdCamelCase}}Parameters {..} = client (Proxy :: Proxy {{operationIdCamelCase}}API){{#allParams}}{{^isBodyParam}} ({{#required}}{{#isQueryParam}}Just {{/isQueryParam}}{{/required}}{{operationId}}{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}){{/isBodyParam}}{{/allParams}}{{#allParams}}{{#isBodyParam}} {{operationId}}{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}{{/isBodyParam}}{{/allParams}}
{{/allParams.0}}
{{^allParams.0}}
{{operationId}} :: ClientM {{returnType}}{{^returnType}}NoContent{{/returnType}}
{{operationId}} = client (Proxy :: Proxy {{operationIdCamelCase}}API)
{{/allParams.0}}
{{/operation}}{{/operations}}{{/apis}}
{{/apiInfo}}
